version: "3"

networks:
 kong-net:
  driver: bridge
  ipam:
      config:
        - subnet: 192.168.18.0/24
          gateway: 192.168.18.1

services:

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      kong-net:
         ipv4_address: 192.168.18.5
    environment:
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_PG_HOST: 192.168.18.5
      KONG_DATABASE: postgres
      KONG_PG_PASSWORD: kong
      # KONG_DNS_RESOLVER: 192.168.18.4:8600,192.168.18.4:8500,192.168.18.4:8700
    links:
      - kong-database
    depends_on:
      - kong-database
      - consul

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    container_name: kong_01
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: 192.168.18.5
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:8000 http2
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      # KONG_DNS_RESOLVER: 192.168.18.4:8600,192.168.18.4:8500,192.168.18.4:8700
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    depends_on:
      - kong-migration
      - kong-database
      - consul
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8001:8001"
      - "8000:8000"
    volumes: 
      - ./config:/opt/kong

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
    networks:
      kong-net:
        ipv4_address: 192.168.18.8
    restart: on-failure
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    restart: always
    networks:
      kong-net: 
        ipv4_address: 192.168.18.11
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"

  #####################################
  #   Service Discovery
  #####################################

  consul :
      container_name : consul
      image: hashicorp/consul:latest
      networks:
        kong-net:
          ipv4_address: 192.168.18.4
      expose:
        - 8500
        - 8600/udp
      ports:
        - "8700:8500"
  #######################################
  # Services
  #######################################
  grpc-server:
    build:
        context: .
        dockerfile: ./Dockerfile
    container_name: grpc_server_01
    depends_on:
        - kong
        - consul
    volumes:
        - ./application:/application
    command: sh -c "python -u /application/greeter_server.py"
    networks:
      kong-net:
        ipv4_address: 192.168.18.9

  grpc-client:
    build:
        context: .
        dockerfile: ./Dockerfile
    container_name: grpc_client_01
    depends_on:
        - grpc-server
    volumes:
        - ./application:/application
    networks:
      kong-net:
        ipv4_address: 192.168.18.10
 
    command: sh -c "python -u /application/greeter_client.py"

  grpc-client-ext:
    build:
        context: .
        dockerfile: ./Dockerfile
    container_name: grpc_client_02
    depends_on:
        - grpc-server
    volumes:
        - ./application:/application
    networks:
      kong-net:
        ipv4_address: 192.168.18.12
 
    command: sh -c "python -u /application/greeter_client.py external"

 